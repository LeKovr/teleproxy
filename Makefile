##
## Golang application Makefile
##

SHELL      = /bin/bash
GO            ?= go

# application name
PRG        ?= teleproxy
# Config filename, hardcoded in docker-compose
CFG         = .env
# docker compose name
SERVICE     = $(PRG)

DIRDIST   ?= dist
ALLARCH   ?= "linux/amd64"
# linux/386 windows/amd64 darwin/386"

# Docker image build vars
# docker-compose version
DC_VER        = 1.14.0
# golang version
GO_VER        = 1.9.0-alpine3.6

# Dcape vars
# container prefix
PROJECT_NAME ?= elfire
# dcape net connect to
DCAPE_NET    ?= dcape_default
# used by deploy system
DOCKER_BIN   ?= docker

# ------------------------------------------------------------------------------
# config vars

# Telegram bot token
BOT_TOKEN        ?= bot_token

# Telegram group ID (without -)
BOT_GROUP        ?= group_id

# ------------------------------------------------------------------------------

-include $(CFG)
export

# ------------------------------------------------------------------------------

.PHONY: all build clean lint docker up down build-docker start-hook update restart end run status dc help
.PHONY: all run ver buildall clean dist link vet

##
## Available targets are:
##

## build and run in foreground
run: build
	./$(PRG) --log_level debug --group $$GROUP --token $$TOKEN

# --DSN $$DSN

## Build cmds
build: gen $(PRG)

## Generate protobuf/mock/bindata
gen: cmd/$(PRG)/bindata.go

cmd/$(PRG)/bindata.go: messages.tmpl
	$(GO) generate ./cmd/$(PRG)/...

## Build command
$(PRG): cmd/$(PRG)/*.go $(SOURCES)
	[ -d .git ] && GH=`git rev-parse HEAD` || GH=nogit ; \
	  GOOS=$(OS) GOARCH=$(ARCH) $(GO) build -v -o $@ -ldflags \
	  "-X main.Build=$(STAMP) -X main.Commit=$$GH" ./cmd/$@

## Build command for scratch docker
build-standalone: lint vet gen
	[ -d .git ] && GH=`git rev-parse HEAD` || GH=nogit ; \
	  $(GO) build -a -v -o $(PRG) -ldflags \
	  "-X main.Build=$(STAMP) -X main.Commit=$$GH" ./cmd/$(PRG)

## run go lint
lint:
	@echo "*** $@ ***"
	@golint cmd/$(PRG)/*.go

## run go vet
vet:
	@echo "*** $@ ***"
	@go vet cmd/$(PRG)/*.go

# install vendor deps
vendor:
	@echo "*** $@ ***"
	which glide > /dev/null || curl https://glide.sh/get | sh
	@echo "*** $@:glide ***"
	glide install

# clean binary
clean:
	@[ -f $(APP) ] && rm $(APP) || true
	@[ -d vendor ] && rm -rf vendor || true

# ------------------------------------------------------------------------------

## Build docker image if none
docker:
	@$(MAKE) -s dc CMD="build $(SERVICE)" || echo ""

## Rebuild docker image
build-docker:
	@$(MAKE) -s dc CMD="build --no-cache --force-rm"

## Start docker container
up:
	@$(MAKE) -s dc CMD="up -d --force-recreate $(SERVICE)" || echo ""

## Stop and remove docker container
down:
	@$(MAKE) -s dc CMD="rm -f -s $(SERVICE)" || echo ""

# ------------------------------------------------------------------------------
# webhook commands

start-hook: up

update: up

stop: down

# ------------------------------------------------------------------------------
# Distro ops

## build app for all platforms
buildall:
	@pushd cmd/$(PRG) > /dev/null
	@for a in "$(ALLARCH)" ; do \
	  echo "** $${a%/*} $${a#*/}" ; \
	  P=$(PRG)_$${a%/*}_$${a#*/} ; \
	  [ "$${a%/*}" == "windows" ] && P=$$P.exe ; \
	  GOOS=$${a%/*} GOARCH=$${a#*/} $(MAKE) -s build ; \
	@done
	@popd > /dev/null

## create disro files
dist: clean-dist buildall
	@echo "*** $@ ***"
	@[ -d $(DIRDIST) ] || mkdir $(DIRDIST) ; \
	@pushd cmd/$(PRG) > /dev/null
	sha256sum $(PRG)* > ../../$(DIRDIST)/SHA256SUMS ; \
	@for a in "$(ALLARCH)" ; do \
	  echo "** $${a%/*} $${a#*/}" ; \
	  P=$(PRG)_$${a%/*}_$${a#*/} ; \
	  [ "$${a%/*}" == "windows" ] && P1=$$P.exe || P1=$$P ; \
	  zip "../../$(DIRDIST)/$$P.zip" "$$P1" README.md ; \
	done
	@popd > /dev/null

## clean generated files
clean-dist:
	@echo "*** $@ ***"
	@pushd cmd/$(PRG) > /dev/null
	@for a in "$(ALLARCH)" ; do \
	  P=$(PRG)_$${a%/*}_$${a#*/} ; \
	  [ "$${a%/*}" == "windows" ] && P=$$P.exe ; \
	  [ -f $$P ] && rm $$P || true ; \
	done ; \
	@popd > /dev/null
	@[ -d $(DIRDIST) ] && rm -rf $(DIRDIST) || true

# ------------------------------------------------------------------------------
# Setup targets

# Файл .env
define CONFIG_DEF
# config file, generated by make $(CFG)

# Bot token
BOT_TOKEN=$(APP_SITE)

# Group proxy messages for
BOT_GROUP=$(DB_NAME)

# Commands archive URL
CMD_URL=

# dcape network connect to, must be set in .env
DCAPE_NET=$(DCAPE_NET)

endef
export CONFIG_DEF

$(CFG):
	@echo "*** $@ ***"
	@[ -f $@ ] || echo "$$CONFIG_DEF" > $@

# ------------------------------------------------------------------------------

# $$PWD используется для того, чтобы текущий каталог был доступен в контейнере по тому же пути
# и относительные тома новых контейнеров могли его использовать
## run docker-compose
dc: docker-compose.yml
	@$$DOCKER_BIN run --rm  -i \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v $$PWD:$$PWD \
  -w $$PWD \
  --env=golang_version=$$GO_VER \
  docker/compose:$$DC_VER \
  -p $$PROJECT_NAME \
  $(CMD)

all: help

help:
	@grep -A 1 "^##" Makefile | less

##
## Press 'q' for exit
##
